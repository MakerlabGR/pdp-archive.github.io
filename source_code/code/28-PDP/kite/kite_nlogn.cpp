#include <cstdio>

const size_t MAXN = 2000000;

long N, K;
long M[MAXN + 1]; // Πίνακας με το μήκος των κομματιών
long C[MAXN + 1];

// H συνάρτηση που επιστρέφει τιμές από τον πίνακα S(i, j)
long S(long i, long j) {
    return C[j] - C[i - 1];
}

long binSearch(long line, long lo, long hi, long val) {
    while (lo < hi) {
        // Σπάμε το διάστημα (lo, hi) σε 2 ίσα υποδιαστήματα
        long mid = (lo + hi) / 2;
        // Παίρνουμε την τιμή στο μέσο του διαστήματος
        long midVal = S(line, mid);
        
        if (midVal == val) {
            // Βρήκαμε την θέση της τιμής οπότε επιστρέφουμε
            return mid;
        }
        if (midVal < val) {
            // Οι γραμμές είναι άυξουσες οπότε για όλα
            // τα i < mid, arr[i] < arr[mid] < val άρα
            // απορρίπτονται
            // Αν χρησιμοποιούσαμε τις στήλες τότε 
            // θα απορρίπταμε τα i > mid
            lo = mid + 1;
        } else { hi = mid - 1; }
    }
    // Το lo είναι το τελευταίο στοιχείο που μένει και ελέγχουμε 
    // αν έχει την τιμή val
    if (S(line, lo) == val) { return lo; }
    return -1; // -1 σημαίνει ότι η τιμή δεν βρέθηκε
}

int main () {
    // Διάβασμα αρχείου εισόδου
    freopen("kite.in", "r", stdin);
    scanf("%ld %ld", &N, &K);
    for (long i = 1; i <= N; ++i) { scanf("%ld", &M[i]); }
	// Αφού διαβάσουμε τα μήκη στον πίνακα pieces μπορούμε 
    // να υπολογίσουμε τον πίνακα C
    C[0] = 0; // Δεν περιέχει κανένα κομμάτι άρα έχει τιμή 0
    for (long i = 1; i <= N; ++i) {
        // Το sums[i] είναι όσο το sums[i-1] συν
        // το επιπλέον κομμάτι που περιέχει pieces[i]
        C[i] = C[i-1] + M[i];
    }
    
    // Αρχική μέγιστη τιμή: Ν + 1
    // Αν στο τέλος της επανάληψης η τιμή 
    // είναι ακόμα Ν + 1 σημαίνει ότι 
    // κανένα κομμάτι καλούμπας δεν είχε άθροισμα 
    // ίσο με Κ και άρα στην απάντηση πρέπει να τυπώσουμε 0
    long minPieces = N + 1;
    for (long i = 1; i <= N; ++i) {
        // Το εύρος της αναζήτησης, όπως μπορούμε να δούμε και από
        // τον πίνακα των S(i, j) ξεκινάει από το i και καταλήγει στο N
        long j = binSearch(i, i, N, K);
        if (j != -1) {
            // Άμα βρέθηκε τιμή Κ σε αυτήν τη γραμμή
            if (j - i + 1 < minPieces) { minPieces = j - i + 1; }
        }
    }
    freopen("kite.out", "w", stdout);
    if (minPieces == N + 1) {
        // Δεν βρέθηκε κομμάτι με μήκος Κ
        printf("0\n");
        return 0;
    }
    // Αλλιώς έχουμε βρει κομμάτι
    printf("%ld\n", minPieces);
    return 0;
}

